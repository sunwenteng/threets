syntax = "proto3";

package Api.trial;

import "global.proto";

/****************************************
 *                                      *
 *          Trial                       *
 *                                      *
 ****************************************/

message Trial {
    uint32 trialID = 1;
    uint32 victoryCount = 2;
    uint32 leftSecond = 3;
}

message initList {
    message Request {}
    message Response {
        Error error = 1;
        repeated Trial trialList = 2;
        uint32 leftRefreshSecond = 3;
        FightTeam team = 4;
        uint32 currentTrialID = 5;
    }
}

message startTrial {
    message Request {
        uint32 trialID = 1;
        FightTeam team = 2;        // 如果是继续上场战斗则不需要发送，回包中服务器给team
    }
    message Response {
        Error error = 1;
        uint32 trialID = 2;        // 当前进度，关卡显示为正在进行的关卡战斗
        FightTeam team = 3;
        uint32 hasFinishedWave = 4;// 已完成战斗波次
        uint32 rightDeathCount = 7;// 已死亡英雄数量
    }
}

// 试炼战斗结束
message finishTrial {
    message Request {}
    message Response {
        Error error = 1;
        repeated Reward reward = 2;
        Trial updateTrial = 3;
        uint32 leftRefreshSecond = 4;
    }
}

// 战斗开始，指点击Fight按钮
message fightStart {
    message Request {}
    message Response {
        Error error = 1;
        string randomSeed = 2; // 随机种子
        repeated FightLoot fightLootArray = 3;  // 战斗掉落随机结果
        uint32 leftSlay = 4;       // 剩余怒气值
    }
}

// 战斗结束
message fightFinish {
    message Request {
        uint32 result = 1;     // 0: failed, 1: success, 2: flee
        uint32 totalRound = 2;     // 总共回合
        repeated uint32 useSlayRound = 3;   // 使用怒气回合列表
        repeated uint32 restoreRound = 4;   // 买活回合数列表
        repeated uint32 specialRound = 5;   // 买大招回合数
    }
    message Response {
        Error error = 1;
        uint32 hasFinishedWave = 2;// 已完成战斗波次
        uint32 rightDeathCount = 4;// 已死亡英雄数量
    }
}

// 放弃当前副本战斗进度
message abandonProcess {
    message Request {}
    message Response {
        Error error = 1;
    }
}

// 买大招
message useSpecial {
    message Request {}
    message Response {
        Error error = 1;
    }
}